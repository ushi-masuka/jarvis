# Jarvis - Phased Working Plan

This document outlines a clear, actionable roadmap for developing the Jarvis research assistant. It is divided into phases, starting with foundational improvements and progressing to more advanced capabilities.

---

### Phase 1: Core Data Quality & Robustness – **DONE**
- Multi-layered extraction pipeline (`trafilatura`, `readability-lxml`, `boilerpy3`, `PyMuPDF`) implemented and validated.
- PDF extraction, ingestion sanitization, and summary reporting now stable.

### Phase 2: Autonomous Data Acquisition – **MOSTLY DONE**
- Web crawler (`src/crawler.py`) built; integration with main pipeline pending.

### Phase 3: Agentic Capabilities – **IN PROGRESS**
- Query processor revamped (classic mode, boolean logic, phrase support).
- Dynamic fetching, paywall strategies, and fallback logic partially implemented.
- Orchestration (multi-expert, RAG) stubbed for future.

---

### Phase 4: Validation & UX (Current)

**Goal:** Ensure the pipeline is robust, user-friendly, and ready for broader use.

**Actionable Steps:**
1. **Dependency/Env:** Fix `tenacity` import error; document environment setup.
2. **Validation:** Run full end-to-end pipeline in classic mode; add integration tests.
3. **Medium Fetcher:** Finalise Selenium/ChromeDriver or migrate to Playwright for robust extraction and paywall handling.
4. **Image-only PDFs:** Add optional OCR (Tesseract) for scanned/graphic PDFs.
5. **Trend Analyzer:** Implement `trend_analyzer.py` for topic trends and gap analysis.
6. **Expert Router:** Complete rule/ML-based routing in `expert_router.py`.
7. **UX Prototype:** Build a Streamlit dashboard for project overview and interactive querying.

---

### Phase 5: Future Enhancements
- LLM-based query rewriting for fetchers.
- Social/forum fetchers.
- Enhanced paywall detection and reporting.
- Full multi-agent orchestration.